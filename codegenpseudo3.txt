// this was written by TA Noelle without direction or suggestion from
// Professor Montagne, it is entirely possible that it contains errors
// if you find an error or you have any questions, please email me at 
// noellemidkiff@knights.ucf.edu

PROGRAM
	emit JMP for main (7, 0, 0, 1)
	BLOCK
	emit HALT (9, 0, 0, 3)

BLOCK
	numVars = 0
	if token == const
		do
			token + 4
		while token == ,
		token + 1
	if token == var
		do 
			numVars++
			token + 2
		while token == ,
		token + 1
	emit INC (6, 0, 0, 3 + numVars)
	STATEMENT

STATEMENT
	if token == ident
		save the symbol table index
		token + 2
		EXPRESSION (0)
		emit STO (4, 0, 0, M comes from the symbol table)
	if token == begin
		token + 1
		STATEMENT
		whlie token == ;
			token + 1
			STATEMENT
		token + 1
	if token == if
		token + 1
		CONDITION
		save the code index 
		emit JPC (8, 0, 0, 0)
		token + 1
		STATEMENT
		fix the jpc from earlier, savedCodeIndex.M = currentcodeindex
	if token == while
		token + 1
		save the code index for condition
		CONDITION
		token + 1
		save the code index for jump
		emit JPC (8, 0, 0, 0)
		STATEMENT
		emit JMP (7, 0, 0, savedCodeIndexForCondition)
		fix the JPC from earlier, savedCodeIndexForJump.M = currentcodeindex
	if token == read
		token + 1
		save the symbol table index
		token + 1
		emit READ (9, 0, 0, 2)
		emit STO (4, 0, 0, M comes from the symbol table)
	if token == write
		token + 1
		save the symbol table index
		if it's a var
			emit LOD (3, 0, 0, M comes from the symbol table)
			emit WRITE (9, 0, 0, 1)
		if it's a const
			emit LIT (1, 0, 0, M comes from the symbol table (val))
			emit WRITE (9, 0, 0, 1)
		token + 1
		
CONDITION
	if token == odd
		token + 1
		EXPRESSION (0)
		emit ODD (15, 0, 0, 0)
	else
		EXPRESSION (0)
		if token == =
			token + 1
			EXPRESSION (1)
			emit EQL (17, 0, 0, 1)
		if token == <>
			token + 1
			EXPRESSION (1)
			emit NEQ (18, 0, 0, 1) 
		if token == <
			token + 1
			EXPRESSION (1)
			emit LSS (19, 0, 0, 1)
		if token == <=
			token + 1
			EXPRESSION (1)
			emit LEQ (20, 0, 0, 1)
		if token == >
			token + 1
			EXPRESSION (1)
			emit GTR (21, 0, 0, 1)
		if token == >=
			token + 1
			EXPRESSION (1)
			emit GEQ (22, 0, 0, 1)

EXPRESSION (regtoendupin = int where answer should go)
	if token == +
		token + 1
	if token == -
		token + 1
		TERM (regtoendupin)
		emit NEG (10, regtoendupin, 0, 0)
		while token == + || -
			if token == +
				token + 1
				TERM (regtoendupin + 1)
				emit ADD (11, regtoendupin, regtoendupin, regtoendupin + 1)
			if token == -
				token + 1
				TERM (regtoendupin + 1)
				emit SUB (12, regtoendupin, regtoendupin, regtoendupin + 1)
		return
	TERM (regtoendupin)
	while token == + || -
		if token == +
			token + 1
			TERM (regtoendupin + 1)
			emit ADD (11, regtoendupin, regtoendupin, regtoendupin + 1)
		if token == -
			token + 1
			TERM (regtoendupin + 1)
			emit SUB (12, regtoendupin, regtoendupin, regtoendupin + 1)
			
TERM (regtoendupin)
	FACTOR (regtoendupin)
	while token == * || /
		if token == *
			token + 1
			FACTOR (regtoendupin + 1)
			emit MUL (13, regtoendupin, regtoendupin, regtoendupin + 1)
		if token == /
			token + 1
			FACTOR (regtoendupin + 1)
			emit DIV (14, regtoendupin, regtoendupin, regtoendupin + 1)

FACTOR (regtoendupin)
	if token == ident
		save the symbol table index
		if token == const
			emit LIT (1, regtoendupin, 0, value from the symbol table)
		if token == var
			emit LOD (3, regtoendupin, 0, m from the symbol table)
		token + 1
	else if token == number
		emit LIT (1, regtoendupin, 0, number value)
		token + 1
	else
		token + 1
		EXPRESSION (regtoendupin)
		token + 1

void emit(int op, int r, int l, int m)
{
	if (cx > CODE_SIZE)
		error too much code
	else
	{
		code[cx].op = op;
		code[cx].r = r;
		code[cx].l = l;
		code[cx].m = m;
		cx++;
	}
}