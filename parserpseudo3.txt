// this was written by TA Noelle without direction or suggestion from
// Professor Montagne, it is entirely possible that it contains errors
// if you find an error or you have any questions, please email me at
// noellemidkiff@knights.ucf.edu

PROGRAM
	BLOCK
	if token != .
		error

BLOCK
	CONST-DECLARATION
	VAR-DECLARATION
	STATEMENT

CONST-DECLARATION
	if token == const
		do
			i++
			if cToken > listSize || token != ident
				error
			save ident name
			if the ident name is already in the symbol table
				error
			get next token
			if token != =
				error
			get next token
			if token != number
				errors
			add to the symbol table (kind 1, saved name, number is current token, lexlevel 0, m 0, unmarked)
			get next token
		while token == ,
		if token != ;
			error
		get next token

VAR-DECLARATION
	if token == var
		numVars = 0
		do
			numVars++
			get next token
			if token != ident
				error
			if ident is already in the symbol table
				error
			add to symbol table (kind 2, name is current token, val 0, lexlevel 0, m = var# + 2, unmarked)
			get next token
		while token == ,
		if token != ;
			error
		get next token

STATEMENT
	if token == ident
		if ident is not in the symbol table at all
			error
		if ident != var
			error
		get next token
		if token != :=
			error
		get next token
		EXPRESSION
		return
	if token == begin
		get next token
		STATEMENT
		while token == ;
			get next token
			STATEMENT
		if token != end
			error
		get next token
		return
	if token == if
		get next token
		CONDITION
		if token != then
			error
		get next token
		STATEMENT
		return
	if token == while
		get next token
		CONDITION
		if token != do
			error
		get next token
		STATEMENT
		return
	if token == read
		get next token
		if token != ident
			error
		if ident is not in the symbol table
			error
		if ident is not a variable
			error
		get next token
		return
	if token == write
		get next token
		if token != ident
			error
		if ident is not in the symbol table
			error
		get next token
		return
	return

CONDITION
	if token == odd
		get next token
		EXPRESSION
	else
		EXPRESSION
		if token != = <> < <= > >=
			error
		get next token
		EXPRESSION

EXPRESSION
	if token == + -
		get next token
	TERM
	while token == + -
		get next token
		TERM

TERM
	FACTOR
	while token == * /
		get next token
		FACTOR

FACTOR
	if token == ident
		if ident is not in the symbol table
			error
		get next token
	else if token == number
		get next token
	else if token == (
		get next token
		EXPRESSION
		if token != )
			error
		get next token
	else
		error
